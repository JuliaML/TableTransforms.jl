@testset "ZScore" begin
  x = rand(rng, Normal(7, 10), 4000)
  y = rand(rng, Normal(15, 2), 4000)
  t = Table(; x, y)
  T = ZScore()
  n, c = apply(T, t)
  μ = mean(Tables.matrix(n), dims=1)
  σ = std(Tables.matrix(n), dims=1)
  @test isapprox(μ[1], 0; atol=1e-6)
  @test isapprox(σ[1], 1; atol=1e-6)
  @test isapprox(μ[2], 0; atol=1e-6)
  @test isapprox(σ[2], 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test Tables.matrix(t) ≈ Tables.matrix(tₒ)

  # row table
  rt = Tables.rowtable(t)
  T = ZScore()
  n, c = apply(T, rt)
  @test Tables.isrowtable(n)
  rtₒ = revert(T, n, c)
  @test Tables.matrix(rt) ≈ Tables.matrix(rtₒ)

  # make sure transform works with single-column tables
  t = Table(x=rand(100))
  n, c = apply(ZScore(), t)
  r = revert(ZScore(), n, c)
  @test isapprox(mean(n.x), 0.0, atol=1e-8)
  @test isapprox(std(n.x), 1.0, atol=1e-8)
  @test isapprox(mean(r.x), mean(t.x), atol=1e-8)
  @test isapprox(std(r.x), std(t.x), atol=1e-8)

  # colspec
  z = x + y
  t = Table(; x, y, z)

  T = ZScore(1, 2)
  n, c = apply(T, t)
  μ = mean(Tables.matrix(n), dims=1)
  σ = std(Tables.matrix(n), dims=1)
  @test isapprox(μ[1], 0; atol=1e-6)
  @test isapprox(σ[1], 1; atol=1e-6)
  @test isapprox(μ[2], 0; atol=1e-6)
  @test isapprox(σ[2], 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test Tables.matrix(t) ≈ Tables.matrix(tₒ)

  T = ZScore([:x, :y])
  n, c = apply(T, t)
  μ = mean(Tables.matrix(n), dims=1)
  σ = std(Tables.matrix(n), dims=1)
  @test isapprox(μ[1], 0; atol=1e-6)
  @test isapprox(σ[1], 1; atol=1e-6)
  @test isapprox(μ[2], 0; atol=1e-6)
  @test isapprox(σ[2], 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test Tables.matrix(t) ≈ Tables.matrix(tₒ)

  T = ZScore(("x", "y"))
  n, c = apply(T, t)
  μ = mean(Tables.matrix(n), dims=1)
  σ = std(Tables.matrix(n), dims=1)
  @test isapprox(μ[1], 0; atol=1e-6)
  @test isapprox(σ[1], 1; atol=1e-6)
  @test isapprox(μ[2], 0; atol=1e-6)
  @test isapprox(σ[2], 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test Tables.matrix(t) ≈ Tables.matrix(tₒ)

  T = ZScore(r"[xy]")
  n, c = apply(T, t)
  μ = mean(Tables.matrix(n), dims=1)
  σ = std(Tables.matrix(n), dims=1)
  @test isapprox(μ[1], 0; atol=1e-6)
  @test isapprox(σ[1], 1; atol=1e-6)
  @test isapprox(μ[2], 0; atol=1e-6)
  @test isapprox(σ[2], 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test Tables.matrix(t) ≈ Tables.matrix(tₒ)

  a = rand(Int, 10)
  b = rand(10)
  t = Table(; a, b)
  T = ZScore(:b)
  n, c = apply(T, t)
  @test isapprox(mean(n.b), 0; atol=1e-6)
  @test isapprox(std(n.b), 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test Tables.matrix(t) ≈ Tables.matrix(tₒ)

  # missing values
  a = [rand(Normal(7, 10), 99); missing]
  t = Table(; a)
  T = ZScore()
  n, c = apply(T, t)
  @test isapprox(mean(skipmissing(n.a)), 0; atol=1e-6)
  @test isapprox(std(skipmissing(n.a)), 1; atol=1e-6)
  tₒ = revert(T, n, c)
  @test t.a[begin:(end - 1)] ≈ tₒ.a[begin:(end - 1)]
  @test ismissing(tₒ.a[end])

  # constant values
  a = fill(2.0, 100)
  t = Table(; a)
  T = ZScore()
  n, c = apply(T, t)
  @test all(==(0), n.a)
  tₒ = revert(T, n, c)
  @test all(==(2), tₒ.a)
end
